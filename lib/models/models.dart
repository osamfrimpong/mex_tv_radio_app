import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import '../db/sqfEntityBase.dart';
import '../db/MyDbModel.dart';

      /*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Liveradio.dart into where to use
      - start typing Liveradio().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(liveradio) / or toList(liveradioList) 
      - you can select one Liveradio or List<Liveradio> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
      // region Liveradio
      class Liveradio {
        // FIELDS
        int id;
      String url;
      String title;
      String image;
      // end FIELDS
        
        
        static const bool _softDeleteActivated=false;
        LiveradioManager __mnLiveradio;
        LiveradioFilterBuilder _select;
      
        LiveradioManager get _mnLiveradio {
          if (__mnLiveradio == null) __mnLiveradio = new LiveradioManager();
          return __mnLiveradio;
        }
      
        Liveradio({this.id, this.url,this.title,this.image}) { setDefaultValues();}
        Liveradio.withFields(this.url,this.title,this.image){ setDefaultValues();}
        Liveradio.withId(this.id, this.url,this.title,this.image){ setDefaultValues();}
      
        // methods
        Map<String, dynamic> toMap({bool forQuery=false}) {
          var map = Map<String, dynamic>();
          if (id != null) map["id"] = id;    if (url != null) map["url"] = url;
    if (title != null) map["title"] = title;
    if (image != null) map["image"] = image;

          return map;
          }
      
          Liveradio.fromMap(Map<String, dynamic> o) {
          this.id = o["id"];
    this.url = o["url"];
    this.title = o["title"];
    this.image = o["image"];

          }
      
        List<dynamic> toArgs() {
          return[id,url,title,image];   
        }  
    
             static fromWeb(VoidCallback liveradioList(List<Liveradio> o)) async {
         fromWebUrl("https://jsonblob.com/api/jsonBlob/e65eabd3-8817-11e9-b9f8-c3b7c2b4fb11", (objList){
          liveradioList (objList);
         });
      }
            
        static fromWebUrl(String url, VoidCallback  liveradioList (List<Liveradio> o)) async {
        var objList = List<Liveradio>();
        http.get(url).then((response) {
          Iterable list = json.decode(response.body);
          try {
            objList = list.map((liveradio) => Liveradio.fromMap(liveradio)).toList();
            liveradioList(objList);
          } catch (e) {
            print("SQFENTITY ERROR Liveradio.fromWeb: ErrorMessage:" + e.toString());
          }
        });
       }
    
        static Future<List<Liveradio>> fromObjectList(Future<List<dynamic>> o) async {
          var liveradiosList = new List<Liveradio>();
          o.then((data) {
            for (int i = 0; i < data.length; i++) {
              liveradiosList.add(Liveradio.fromMap(data[i]));
            }
          });
          return liveradiosList;
        }
      
        static List<Liveradio> fromMapList(List<Map<String, dynamic>> query) {
          List<Liveradio> liveradios = List<Liveradio>();
          for (Map map in query) {
            liveradios.add(Liveradio.fromMap(map));
          }
          return liveradios;
        }
      
        /// returns Liveradio by ID if exist, otherwise returns null
        /// <param name="id">Primary Key Value</param>
        /// <returns>returns Liveradio if exist, otherwise returns null</returns>
        getById(int id, VoidCallback liveradio(Liveradio o)) {
          Liveradio liveradioObj;
          var liveradioFuture = _mnLiveradio.getById(id);
          liveradioFuture.then((data) {
            if (data.length > 0)
              liveradioObj = Liveradio.fromMap(data[0]);
            else
              liveradioObj = null;
            liveradio(liveradioObj);
          });
        }
      
        /// <summary>
        /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> save() async {
          if (id == null || id == 0)
            id = await _mnLiveradio.insert(
                Liveradio.withFields(url,title,image));
          else
            id= await _upsert();
          return id;
        }
    
        /// <summary>
        /// saveAll method saves the sent List<Liveradio> as a batch in one transaction 
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> saveAll(List<Liveradio> liveradios) async {
          var results = _mnLiveradio.saveAll("INSERT OR REPLACE INTO liveradios (id, url,title,image)  VALUES (?,?,?,?)",liveradios);
          return results;
        }
    
        /// <summary>
        /// Updates if the record exists, otherwise adds a new row
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> _upsert() async {
          id = await _mnLiveradio.rawInsert(
              "INSERT OR REPLACE INTO liveradios (id, url,title,image)  VALUES (?,?,?,?)", [id,url,title,image]);
          return id;
        }
    
        
        /// <summary>
        /// inserts or replaces the sent List<Todo> as a batch in one transaction.
        /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> upsertAll(List<Liveradio> liveradios) async {
          var results = await _mnLiveradio.rawInsertAll(
              "INSERT OR REPLACE INTO liveradios (id, url,title,image)  VALUES (?,?,?,?)", liveradios);
          return results;
        }
    
    
        /// <summary>
        /// saveAs Liveradio. Returns a new Primary Key value of Liveradio
        /// </summary>
        /// <returns>Returns a new Primary Key value of Liveradio</returns>
        Future<int> saveAs() async {
          id = await _mnLiveradio.insert(
              Liveradio.withFields(url,title,image));
          return id;
        }
      
    
        /// <summary>
        /// Deletes Liveradio
        /// </summary>
        /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
        Future<BoolResult> delete() async {
          print("SQFENTITIY: delete Liveradio invoked (id=$id)");
            if (!_softDeleteActivated)
  return _mnLiveradio.delete(QueryParams(whereString: "id=$id"));
  else
  return _mnLiveradio.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
        }
          
        //private LiveradioFilterBuilder _Select;
        LiveradioFilterBuilder select(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          _select = new LiveradioFilterBuilder(this);
          _select._getIsDeleted = getIsDeleted==true;
          _select.qparams.selectColumns = columnsToSelect;
          return _select;
        }
      
        LiveradioFilterBuilder distinct(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          LiveradioFilterBuilder _distinct = new LiveradioFilterBuilder(this);
          _distinct._getIsDeleted = getIsDeleted==true;
          _distinct.qparams.selectColumns = columnsToSelect;
          _distinct.qparams.distinct = true;
          return _distinct;
        }
      
        void setDefaultValues() {
          
        }
        //end methods
      }
      // endregion liveradio
      
          
// region LiveradioField
class LiveradioField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  LiveradioFilterBuilder liveradioFB;
  LiveradioField(LiveradioFilterBuilder fb) {
    param = new DbParameter();
    liveradioFB = fb;
  }

  LiveradioField get not {
    _waitingNot = " NOT ";
    return this;
  }

  LiveradioFilterBuilder equals(var pValue) {
    param.expression = "=";
    liveradioFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, liveradioFB.parameters, param, SqlSyntax.EQuals,
            liveradioFB._addedBlocks)
        : setCriteria(pValue, liveradioFB.parameters, param, SqlSyntax.NotEQuals,
            liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder isNull() {
    liveradioFB._addedBlocks = setCriteria(
        0,
        liveradioFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder contains(dynamic pValue) {
    liveradioFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        liveradioFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder startsWith(dynamic pValue) {
    liveradioFB._addedBlocks = setCriteria(
        pValue + "%",
        liveradioFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder endsWith(dynamic pValue) {
    liveradioFB._addedBlocks = setCriteria(
        "%" + pValue,
        liveradioFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      liveradioFB._addedBlocks = setCriteria(
          pFirst,
          liveradioFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          liveradioFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        liveradioFB._addedBlocks = setCriteria(pFirst, liveradioFB.parameters,
            param, SqlSyntax.LessThan, liveradioFB._addedBlocks);
      else
        liveradioFB._addedBlocks = setCriteria(pFirst, liveradioFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, liveradioFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        liveradioFB._addedBlocks = setCriteria(pLast, liveradioFB.parameters, param,
            SqlSyntax.GreaterThan, liveradioFB._addedBlocks);
      else
        liveradioFB._addedBlocks = setCriteria(pLast, liveradioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, liveradioFB._addedBlocks);
    }
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    liveradioFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.GreaterThan, liveradioFB._addedBlocks)
        : setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    liveradioFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, liveradioFB.parameters, param, SqlSyntax.LessThan,
            liveradioFB._addedBlocks)
        : setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    liveradioFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, liveradioFB._addedBlocks)
        : setCriteria(pValue, liveradioFB.parameters, param, SqlSyntax.LessThan,
            liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    liveradioFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, liveradioFB._addedBlocks)
        : setCriteria(pValue, liveradioFB.parameters, param,
            SqlSyntax.GreaterThan, liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }

  LiveradioFilterBuilder inValues(var pValue) {
    liveradioFB._addedBlocks = setCriteria(
        pValue,
        liveradioFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        liveradioFB._addedBlocks);
    _waitingNot = "";
    liveradioFB._addedBlocks.needEndBlock[liveradioFB._blockIndex] =
        liveradioFB._addedBlocks.retVal;
    return liveradioFB;
  }
}
// endregion LiveradioField

       // region LiveradioFilterBuilder
   class LiveradioFilterBuilder extends SearchCriteria {
     AddedBlocks _addedBlocks;
     int _blockIndex = 0;
     List<DbParameter> parameters;
     List<String> orderByList;
     Liveradio _obj;
     QueryParams qparams;
     int _pagesize;
     int _page;
     LiveradioFilterBuilder(Liveradio obj) {
       whereString = "";
       qparams = new QueryParams();
       parameters = List<DbParameter>();
       orderByList = List<String>();
       groupByList = List<String>();
       _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
       _addedBlocks.needEndBlock.add(false);
       _addedBlocks.waitingStartBlock.add(false);
       _pagesize = 0;
       _page = 0;
       _obj = obj;
     }
   
     LiveradioFilterBuilder get and {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " AND ";
       return this;
     }
   
     LiveradioFilterBuilder get or {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " OR ";
       return this;
     }
   
     LiveradioFilterBuilder get startBlock {
       _addedBlocks.waitingStartBlock.add(true);
       _addedBlocks.needEndBlock.add(false);
       _blockIndex++;
       if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
       return this;
     }
   
     LiveradioFilterBuilder where(String whereCriteria) {
       if (whereCriteria != null && whereCriteria != "") {
         DbParameter param = new DbParameter();
         _addedBlocks = setCriteria(
             0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
         _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
       }
       return this;
     }
   
     LiveradioFilterBuilder page(int page, int pagesize) {
       if (page > 0) _page = page;
       if (pagesize > 0) _pagesize = pagesize;
       return this;
     }
   
     LiveradioFilterBuilder top(int count) {
       if (count > 0) {
         _pagesize = count;
       }
       return this;
     }
   
     LiveradioFilterBuilder get endBlock {
       if (_addedBlocks.needEndBlock[_blockIndex]) {
         parameters[parameters.length - 1].whereString += " ) ";
       }
       _addedBlocks.needEndBlock.removeAt(_blockIndex);
       _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
       _blockIndex--;
       return this;
     }
   
     LiveradioFilterBuilder orderBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add(argFields);
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s ");
           }
       }
       return this;
     }
   
     LiveradioFilterBuilder orderByDesc(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add("$argFields desc ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s desc ");
           }
       }
       return this;
     }
   
     LiveradioFilterBuilder groupBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.groupByList.add(" $argFields ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.groupByList.add(" $s ");
           }
       }
       return this;
     }
   
     LiveradioField setField(LiveradioField field, String colName, DbType dbtype) {
       field = new LiveradioField(this);
       field.param = new DbParameter(
           dbType: dbtype,
           columnName: colName,
           wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
       return field;
     }
   
            LiveradioField _id;
     LiveradioField get id {
       _id = setField(_id, "id", DbType.integer);
       return _id;
     }
                LiveradioField _url;
     LiveradioField get url {
       _url = setField(_url, "url", DbType.text);
       return _url;
     }
                LiveradioField _title;
     LiveradioField get title {
       _title = setField(_title, "title", DbType.text);
       return _title;
     }
                LiveradioField _image;
     LiveradioField get image {
       _image = setField(_image, "image", DbType.text);
       return _image;
     }
       
   
     bool _getIsDeleted;
   
     void _buildParameters() {
       if (_page > 0 && _pagesize > 0) {
         qparams.limit = _pagesize;
         qparams.offset = (_page - 1) * _pagesize;
       } else {
         qparams.limit = _pagesize;
         qparams.offset = _page;
       }
       for (DbParameter param in parameters) {
         if (param.columnName != null) {
           if (param.value is List) {
             param.value = param.value
                 .toString()
                 .replaceAll("[", "")
                 .replaceAll("]", "")
                 .toString();
             whereString += param.whereString
                 .replaceAll("{field}", param.columnName)
                 .replaceAll("?", param.value);
             param.value = null;
           } else
             whereString +=
                 param.whereString.replaceAll("{field}", param.columnName);
           switch (param.dbType) {
             case DbType.bool:
               if (param.value != null) param.value = param.value ? 1 : 0;
               break;
             default:
           }
   
           if (param.value != null) whereArguments.add(param.value);
           if (param.value2 != null) whereArguments.add(param.value2);
         } else
           whereString += param.whereString;
       }
       if (Liveradio._softDeleteActivated) {
         if (whereString != "")
           whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
               " ($whereString)";
         else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
       }
   
       if (whereString != "") qparams.whereString = whereString;
       qparams.whereArguments = whereArguments;
       qparams.groupBy = groupByList.join(',');
       qparams.orderBy = orderByList.join(',');
     }
   
     
    /// <summary>
    /// Deletes List<Liveradio> batch by query 
    /// </summary>
    /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
    Future<BoolResult> delete() async {
      _buildParameters();
      var r= BoolResult();
        if(Liveradio._softDeleteActivated)
          r = await _obj._mnLiveradio.updateBatch(qparams,{"isDeleted":1});
      else
          r = await _obj._mnLiveradio.delete(qparams);
      return r;    
    }
     
    
     Future<BoolResult> update(Map<String, dynamic> values) {
       _buildParameters();
       return _obj._mnLiveradio.updateBatch(qparams, values);
     }
   
     /// This method always returns LiveradioObj if exist, otherwise returns null 
     /// <returns>List<Liveradio></returns>
     void toSingle(VoidCallback liveradio(Liveradio o)) {
       _pagesize = 1;
       _buildParameters();
       var objFuture = _obj._mnLiveradio.toList(qparams);
       objFuture.then((data) {
         if (data.length > 0)
           liveradio(Liveradio.fromMap(data[0]));
         else
           liveradio(null);
       });
     }
     
   
      /// This method always returns int.
      /// <returns>int</returns>
      Future<BoolResult> toCount(VoidCallback liveradioCount (int c)) async {
       _buildParameters();
       qparams.selectColumns = ["COUNT(1) AS CNT"];   
       var liveradiosFuture = await _obj._mnLiveradio.toList(qparams);
         int count = liveradiosFuture[0]["CNT"];
         liveradioCount (count);
         return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
     }
      
     /// This method always returns List<Liveradio>. 
     /// <returns>List<Liveradio></returns>
     void toList(VoidCallback liveradioList (List<Liveradio> o)) async {
   
       _buildParameters();
   
       var liveradiosFuture = _obj._mnLiveradio.toList(qparams);
   
       List<Liveradio> liveradiosData = new List<Liveradio>();
       liveradiosFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           liveradiosData.add(Liveradio.fromMap(data[i]));
         }
         liveradioList (liveradiosData);
         liveradiosData = null;
       });
     }
  
     /// This method always returns Primary Key List<int>. 
     /// <returns>List<int></returns>
     Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
           [bool buildParameters=true]) async {
       if(buildParameters) _buildParameters();
       List<int> idData = new List<int>();
       qparams.selectColumns= ["id"];
       var idFuture = await _obj._mnLiveradio.toList(qparams);
   

         int count = idFuture.length;
         for (int i = 0; i < count; i++) {
           idData.add(idFuture[i]["id"]);
         }
         idList (idData);
         return idData;

     }
  
     void toListObject(VoidCallback listObject(List<dynamic> o)) async {
       _buildParameters();
   
       var objectFuture = _obj._mnLiveradio.toList(qparams);
   
       List<dynamic> objectsData = new List<dynamic>();
       objectFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           objectsData.add(data[i]);
         }
         listObject(objectsData);
         objectsData = null;
       });
   
       
     }
   
   }
   // endregion LiveradioFilterBuilder
       
       


// region LiveradioFields
class LiveradioFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fUrl;
  static TableField get url {
    _fUrl = SqlSyntax.setField(_fUrl, "url", DbType.text);
    return _fUrl;
  }
  static TableField _fTitle;
  static TableField get title {
    _fTitle = SqlSyntax.setField(_fTitle, "title", DbType.text);
    return _fTitle;
  }
  static TableField _fImage;
  static TableField get image {
    _fImage = SqlSyntax.setField(_fImage, "image", DbType.text);
    return _fImage;
  }

}
// endregion LiveradioFields

//region LiveradioManager
class LiveradioManager extends SqfEntityProvider {
  static String _tableName = "liveradios";
  static String _colId = "id";

  LiveradioManager():super(MyDbModel(),tableName: _tableName, colId: _colId);
}
//endregion LiveradioManager


      /*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Carouselimage.dart into where to use
      - start typing Carouselimage().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(carouselimage) / or toList(carouselimageList) 
      - you can select one Carouselimage or List<Carouselimage> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
      // region Carouselimage
      class Carouselimage {
        // FIELDS
        int id;
      String url;
      // end FIELDS
        
        
        static const bool _softDeleteActivated=false;
        CarouselimageManager __mnCarouselimage;
        CarouselimageFilterBuilder _select;
      
        CarouselimageManager get _mnCarouselimage {
          if (__mnCarouselimage == null) __mnCarouselimage = new CarouselimageManager();
          return __mnCarouselimage;
        }
      
        Carouselimage({this.id, this.url}) { setDefaultValues();}
        Carouselimage.withFields(this.url){ setDefaultValues();}
        Carouselimage.withId(this.id, this.url){ setDefaultValues();}
      
        // methods
        Map<String, dynamic> toMap({bool forQuery=false}) {
          var map = Map<String, dynamic>();
          if (id != null) map["id"] = id;    if (url != null) map["url"] = url;

          return map;
          }
      
          Carouselimage.fromMap(Map<String, dynamic> o) {
          this.id = o["id"];
    this.url = o["url"];

          }
      
        List<dynamic> toArgs() {
          return[id,url];   
        }  
    
             static fromWeb(VoidCallback carouselimageList(List<Carouselimage> o)) async {
         fromWebUrl("https://jsonblob.com/api/jsonBlob/ff3a6236-60c9-11e9-b19d-af6ec6b68ba5", (objList){
          carouselimageList (objList);
         });
      }
            
        static fromWebUrl(String url, VoidCallback  carouselimageList (List<Carouselimage> o)) async {
        var objList = List<Carouselimage>();
        http.get(url).then((response) {
          Iterable list = json.decode(response.body);
          try {
            objList = list.map((carouselimage) => Carouselimage.fromMap(carouselimage)).toList();
            carouselimageList(objList);
          } catch (e) {
            print("SQFENTITY ERROR Carouselimage.fromWeb: ErrorMessage:" + e.toString());
          }
        });
       }
    
        static Future<List<Carouselimage>> fromObjectList(Future<List<dynamic>> o) async {
          var carouselimagesList = new List<Carouselimage>();
          o.then((data) {
            for (int i = 0; i < data.length; i++) {
              carouselimagesList.add(Carouselimage.fromMap(data[i]));
            }
          });
          return carouselimagesList;
        }
      
        static List<Carouselimage> fromMapList(List<Map<String, dynamic>> query) {
          List<Carouselimage> carouselimages = List<Carouselimage>();
          for (Map map in query) {
            carouselimages.add(Carouselimage.fromMap(map));
          }
          return carouselimages;
        }
      
        /// returns Carouselimage by ID if exist, otherwise returns null
        /// <param name="id">Primary Key Value</param>
        /// <returns>returns Carouselimage if exist, otherwise returns null</returns>
        getById(int id, VoidCallback carouselimage(Carouselimage o)) {
          Carouselimage carouselimageObj;
          var carouselimageFuture = _mnCarouselimage.getById(id);
          carouselimageFuture.then((data) {
            if (data.length > 0)
              carouselimageObj = Carouselimage.fromMap(data[0]);
            else
              carouselimageObj = null;
            carouselimage(carouselimageObj);
          });
        }
      
        /// <summary>
        /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> save() async {
          if (id == null || id == 0)
            id = await _mnCarouselimage.insert(
                Carouselimage.withFields(url));
          else
            id= await _upsert();
          return id;
        }
    
        /// <summary>
        /// saveAll method saves the sent List<Carouselimage> as a batch in one transaction 
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> saveAll(List<Carouselimage> carouselimages) async {
          var results = _mnCarouselimage.saveAll("INSERT OR REPLACE INTO carouselimages (id, url)  VALUES (?,?)",carouselimages);
          return results;
        }
    
        /// <summary>
        /// Updates if the record exists, otherwise adds a new row
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> _upsert() async {
          id = await _mnCarouselimage.rawInsert(
              "INSERT OR REPLACE INTO carouselimages (id, url)  VALUES (?,?)", [id,url]);
          return id;
        }
    
        
        /// <summary>
        /// inserts or replaces the sent List<Todo> as a batch in one transaction.
        /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> upsertAll(List<Carouselimage> carouselimages) async {
          var results = await _mnCarouselimage.rawInsertAll(
              "INSERT OR REPLACE INTO carouselimages (id, url)  VALUES (?,?)", carouselimages);
          return results;
        }
    
    
        /// <summary>
        /// saveAs Carouselimage. Returns a new Primary Key value of Carouselimage
        /// </summary>
        /// <returns>Returns a new Primary Key value of Carouselimage</returns>
        Future<int> saveAs() async {
          id = await _mnCarouselimage.insert(
              Carouselimage.withFields(url));
          return id;
        }
      
    
        /// <summary>
        /// Deletes Carouselimage
        /// </summary>
        /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
        Future<BoolResult> delete() async {
          print("SQFENTITIY: delete Carouselimage invoked (id=$id)");
            if (!_softDeleteActivated)
  return _mnCarouselimage.delete(QueryParams(whereString: "id=$id"));
  else
  return _mnCarouselimage.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
        }
          
        //private CarouselimageFilterBuilder _Select;
        CarouselimageFilterBuilder select(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          _select = new CarouselimageFilterBuilder(this);
          _select._getIsDeleted = getIsDeleted==true;
          _select.qparams.selectColumns = columnsToSelect;
          return _select;
        }
      
        CarouselimageFilterBuilder distinct(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          CarouselimageFilterBuilder _distinct = new CarouselimageFilterBuilder(this);
          _distinct._getIsDeleted = getIsDeleted==true;
          _distinct.qparams.selectColumns = columnsToSelect;
          _distinct.qparams.distinct = true;
          return _distinct;
        }
      
        void setDefaultValues() {
          
        }
        //end methods
      }
      // endregion carouselimage
      
          
// region CarouselimageField
class CarouselimageField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  CarouselimageFilterBuilder carouselimageFB;
  CarouselimageField(CarouselimageFilterBuilder fb) {
    param = new DbParameter();
    carouselimageFB = fb;
  }

  CarouselimageField get not {
    _waitingNot = " NOT ";
    return this;
  }

  CarouselimageFilterBuilder equals(var pValue) {
    param.expression = "=";
    carouselimageFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, carouselimageFB.parameters, param, SqlSyntax.EQuals,
            carouselimageFB._addedBlocks)
        : setCriteria(pValue, carouselimageFB.parameters, param, SqlSyntax.NotEQuals,
            carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder isNull() {
    carouselimageFB._addedBlocks = setCriteria(
        0,
        carouselimageFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder contains(dynamic pValue) {
    carouselimageFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        carouselimageFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder startsWith(dynamic pValue) {
    carouselimageFB._addedBlocks = setCriteria(
        pValue + "%",
        carouselimageFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder endsWith(dynamic pValue) {
    carouselimageFB._addedBlocks = setCriteria(
        "%" + pValue,
        carouselimageFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      carouselimageFB._addedBlocks = setCriteria(
          pFirst,
          carouselimageFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          carouselimageFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        carouselimageFB._addedBlocks = setCriteria(pFirst, carouselimageFB.parameters,
            param, SqlSyntax.LessThan, carouselimageFB._addedBlocks);
      else
        carouselimageFB._addedBlocks = setCriteria(pFirst, carouselimageFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, carouselimageFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        carouselimageFB._addedBlocks = setCriteria(pLast, carouselimageFB.parameters, param,
            SqlSyntax.GreaterThan, carouselimageFB._addedBlocks);
      else
        carouselimageFB._addedBlocks = setCriteria(pLast, carouselimageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, carouselimageFB._addedBlocks);
    }
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    carouselimageFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.GreaterThan, carouselimageFB._addedBlocks)
        : setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    carouselimageFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, carouselimageFB.parameters, param, SqlSyntax.LessThan,
            carouselimageFB._addedBlocks)
        : setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    carouselimageFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, carouselimageFB._addedBlocks)
        : setCriteria(pValue, carouselimageFB.parameters, param, SqlSyntax.LessThan,
            carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    carouselimageFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, carouselimageFB._addedBlocks)
        : setCriteria(pValue, carouselimageFB.parameters, param,
            SqlSyntax.GreaterThan, carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }

  CarouselimageFilterBuilder inValues(var pValue) {
    carouselimageFB._addedBlocks = setCriteria(
        pValue,
        carouselimageFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        carouselimageFB._addedBlocks);
    _waitingNot = "";
    carouselimageFB._addedBlocks.needEndBlock[carouselimageFB._blockIndex] =
        carouselimageFB._addedBlocks.retVal;
    return carouselimageFB;
  }
}
// endregion CarouselimageField

       // region CarouselimageFilterBuilder
   class CarouselimageFilterBuilder extends SearchCriteria {
     AddedBlocks _addedBlocks;
     int _blockIndex = 0;
     List<DbParameter> parameters;
     List<String> orderByList;
     Carouselimage _obj;
     QueryParams qparams;
     int _pagesize;
     int _page;
     CarouselimageFilterBuilder(Carouselimage obj) {
       whereString = "";
       qparams = new QueryParams();
       parameters = List<DbParameter>();
       orderByList = List<String>();
       groupByList = List<String>();
       _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
       _addedBlocks.needEndBlock.add(false);
       _addedBlocks.waitingStartBlock.add(false);
       _pagesize = 0;
       _page = 0;
       _obj = obj;
     }
   
     CarouselimageFilterBuilder get and {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " AND ";
       return this;
     }
   
     CarouselimageFilterBuilder get or {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " OR ";
       return this;
     }
   
     CarouselimageFilterBuilder get startBlock {
       _addedBlocks.waitingStartBlock.add(true);
       _addedBlocks.needEndBlock.add(false);
       _blockIndex++;
       if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
       return this;
     }
   
     CarouselimageFilterBuilder where(String whereCriteria) {
       if (whereCriteria != null && whereCriteria != "") {
         DbParameter param = new DbParameter();
         _addedBlocks = setCriteria(
             0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
         _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
       }
       return this;
     }
   
     CarouselimageFilterBuilder page(int page, int pagesize) {
       if (page > 0) _page = page;
       if (pagesize > 0) _pagesize = pagesize;
       return this;
     }
   
     CarouselimageFilterBuilder top(int count) {
       if (count > 0) {
         _pagesize = count;
       }
       return this;
     }
   
     CarouselimageFilterBuilder get endBlock {
       if (_addedBlocks.needEndBlock[_blockIndex]) {
         parameters[parameters.length - 1].whereString += " ) ";
       }
       _addedBlocks.needEndBlock.removeAt(_blockIndex);
       _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
       _blockIndex--;
       return this;
     }
   
     CarouselimageFilterBuilder orderBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add(argFields);
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s ");
           }
       }
       return this;
     }
   
     CarouselimageFilterBuilder orderByDesc(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add("$argFields desc ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s desc ");
           }
       }
       return this;
     }
   
     CarouselimageFilterBuilder groupBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.groupByList.add(" $argFields ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.groupByList.add(" $s ");
           }
       }
       return this;
     }
   
     CarouselimageField setField(CarouselimageField field, String colName, DbType dbtype) {
       field = new CarouselimageField(this);
       field.param = new DbParameter(
           dbType: dbtype,
           columnName: colName,
           wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
       return field;
     }
   
            CarouselimageField _id;
     CarouselimageField get id {
       _id = setField(_id, "id", DbType.integer);
       return _id;
     }
                CarouselimageField _url;
     CarouselimageField get url {
       _url = setField(_url, "url", DbType.text);
       return _url;
     }
       
   
     bool _getIsDeleted;
   
     void _buildParameters() {
       if (_page > 0 && _pagesize > 0) {
         qparams.limit = _pagesize;
         qparams.offset = (_page - 1) * _pagesize;
       } else {
         qparams.limit = _pagesize;
         qparams.offset = _page;
       }
       for (DbParameter param in parameters) {
         if (param.columnName != null) {
           if (param.value is List) {
             param.value = param.value
                 .toString()
                 .replaceAll("[", "")
                 .replaceAll("]", "")
                 .toString();
             whereString += param.whereString
                 .replaceAll("{field}", param.columnName)
                 .replaceAll("?", param.value);
             param.value = null;
           } else
             whereString +=
                 param.whereString.replaceAll("{field}", param.columnName);
           switch (param.dbType) {
             case DbType.bool:
               if (param.value != null) param.value = param.value ? 1 : 0;
               break;
             default:
           }
   
           if (param.value != null) whereArguments.add(param.value);
           if (param.value2 != null) whereArguments.add(param.value2);
         } else
           whereString += param.whereString;
       }
       if (Carouselimage._softDeleteActivated) {
         if (whereString != "")
           whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
               " ($whereString)";
         else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
       }
   
       if (whereString != "") qparams.whereString = whereString;
       qparams.whereArguments = whereArguments;
       qparams.groupBy = groupByList.join(',');
       qparams.orderBy = orderByList.join(',');
     }
   
     
    /// <summary>
    /// Deletes List<Carouselimage> batch by query 
    /// </summary>
    /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
    Future<BoolResult> delete() async {
      _buildParameters();
      var r= BoolResult();
        if(Carouselimage._softDeleteActivated)
          r = await _obj._mnCarouselimage.updateBatch(qparams,{"isDeleted":1});
      else
          r = await _obj._mnCarouselimage.delete(qparams);
      return r;    
    }
     
    
     Future<BoolResult> update(Map<String, dynamic> values) {
       _buildParameters();
       return _obj._mnCarouselimage.updateBatch(qparams, values);
     }
   
     /// This method always returns CarouselimageObj if exist, otherwise returns null 
     /// <returns>List<Carouselimage></returns>
     void toSingle(VoidCallback carouselimage(Carouselimage o)) {
       _pagesize = 1;
       _buildParameters();
       var objFuture = _obj._mnCarouselimage.toList(qparams);
       objFuture.then((data) {
         if (data.length > 0)
           carouselimage(Carouselimage.fromMap(data[0]));
         else
           carouselimage(null);
       });
     }
     
   
      /// This method always returns int.
      /// <returns>int</returns>
      Future<BoolResult> toCount(VoidCallback carouselimageCount (int c)) async {
       _buildParameters();
       qparams.selectColumns = ["COUNT(1) AS CNT"];   
       var carouselimagesFuture = await _obj._mnCarouselimage.toList(qparams);
         int count = carouselimagesFuture[0]["CNT"];
         carouselimageCount (count);
         return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
     }
      
     /// This method always returns List<Carouselimage>. 
     /// <returns>List<Carouselimage></returns>
     void toList(VoidCallback carouselimageList (List<Carouselimage> o)) async {
   
       _buildParameters();
   
       var carouselimagesFuture = _obj._mnCarouselimage.toList(qparams);
   
       List<Carouselimage> carouselimagesData = new List<Carouselimage>();
       carouselimagesFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           carouselimagesData.add(Carouselimage.fromMap(data[i]));
         }
         carouselimageList (carouselimagesData);
         carouselimagesData = null;
       });
     }
  
     /// This method always returns Primary Key List<int>. 
     /// <returns>List<int></returns>
     Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
           [bool buildParameters=true]) async {
       if(buildParameters) _buildParameters();
       List<int> idData = new List<int>();
       qparams.selectColumns= ["id"];
       var idFuture = await _obj._mnCarouselimage.toList(qparams);
   

         int count = idFuture.length;
         for (int i = 0; i < count; i++) {
           idData.add(idFuture[i]["id"]);
         }
         idList (idData);
         return idData;

     }
  
     void toListObject(VoidCallback listObject(List<dynamic> o)) async {
       _buildParameters();
   
       var objectFuture = _obj._mnCarouselimage.toList(qparams);
   
       List<dynamic> objectsData = new List<dynamic>();
       objectFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           objectsData.add(data[i]);
         }
         listObject(objectsData);
         objectsData = null;
       });
   
       
     }
   
   }
   // endregion CarouselimageFilterBuilder
       
       


// region CarouselimageFields
class CarouselimageFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fUrl;
  static TableField get url {
    _fUrl = SqlSyntax.setField(_fUrl, "url", DbType.text);
    return _fUrl;
  }

}
// endregion CarouselimageFields

//region CarouselimageManager
class CarouselimageManager extends SqfEntityProvider {
  static String _tableName = "carouselimages";
  static String _colId = "id";

  CarouselimageManager():super(MyDbModel(),tableName: _tableName, colId: _colId);
}
//endregion CarouselimageManager


      /*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Youtubevideo.dart into where to use
      - start typing Youtubevideo().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(youtubevideo) / or toList(youtubevideoList) 
      - you can select one Youtubevideo or List<Youtubevideo> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
      // region Youtubevideo
      class Youtubevideo {
        // FIELDS
        int id;
      String url;
      String video_url;
      // end FIELDS
        
        
        static const bool _softDeleteActivated=false;
        YoutubevideoManager __mnYoutubevideo;
        YoutubevideoFilterBuilder _select;
      
        YoutubevideoManager get _mnYoutubevideo {
          if (__mnYoutubevideo == null) __mnYoutubevideo = new YoutubevideoManager();
          return __mnYoutubevideo;
        }
      
        Youtubevideo({this.id, this.url,this.video_url}) { setDefaultValues();}
        Youtubevideo.withFields(this.url,this.video_url){ setDefaultValues();}
        Youtubevideo.withId(this.id, this.url,this.video_url){ setDefaultValues();}
      
        // methods
        Map<String, dynamic> toMap({bool forQuery=false}) {
          var map = Map<String, dynamic>();
          if (id != null) map["id"] = id;    if (url != null) map["url"] = url;
    if (video_url != null) map["video_url"] = video_url;

          return map;
          }
      
          Youtubevideo.fromMap(Map<String, dynamic> o) {
          this.id = o["id"];
    this.url = o["url"];
    this.video_url = o["video_url"];

          }
      
        List<dynamic> toArgs() {
          return[id,url,video_url];   
        }  
    
             static fromWeb(VoidCallback youtubevideoList(List<Youtubevideo> o)) async {
         fromWebUrl("https://jsonblob.com/api/jsonBlob/02a62697-8af3-11e9-9e16-e78fe44b7cf1", (objList){
          youtubevideoList (objList);
         });
      }
            
        static fromWebUrl(String url, VoidCallback  youtubevideoList (List<Youtubevideo> o)) async {
        var objList = List<Youtubevideo>();
        http.get(url).then((response) {
          Iterable list = json.decode(response.body);
          try {
            objList = list.map((youtubevideo) => Youtubevideo.fromMap(youtubevideo)).toList();
            youtubevideoList(objList);
          } catch (e) {
            print("SQFENTITY ERROR Youtubevideo.fromWeb: ErrorMessage:" + e.toString());
          }
        });
       }
    
        static Future<List<Youtubevideo>> fromObjectList(Future<List<dynamic>> o) async {
          var youtubevideosList = new List<Youtubevideo>();
          o.then((data) {
            for (int i = 0; i < data.length; i++) {
              youtubevideosList.add(Youtubevideo.fromMap(data[i]));
            }
          });
          return youtubevideosList;
        }
      
        static List<Youtubevideo> fromMapList(List<Map<String, dynamic>> query) {
          List<Youtubevideo> youtubevideos = List<Youtubevideo>();
          for (Map map in query) {
            youtubevideos.add(Youtubevideo.fromMap(map));
          }
          return youtubevideos;
        }
      
        /// returns Youtubevideo by ID if exist, otherwise returns null
        /// <param name="id">Primary Key Value</param>
        /// <returns>returns Youtubevideo if exist, otherwise returns null</returns>
        getById(int id, VoidCallback youtubevideo(Youtubevideo o)) {
          Youtubevideo youtubevideoObj;
          var youtubevideoFuture = _mnYoutubevideo.getById(id);
          youtubevideoFuture.then((data) {
            if (data.length > 0)
              youtubevideoObj = Youtubevideo.fromMap(data[0]);
            else
              youtubevideoObj = null;
            youtubevideo(youtubevideoObj);
          });
        }
      
        /// <summary>
        /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> save() async {
          if (id == null || id == 0)
            id = await _mnYoutubevideo.insert(
                Youtubevideo.withFields(url,video_url));
          else
            id= await _upsert();
          return id;
        }
    
        /// <summary>
        /// saveAll method saves the sent List<Youtubevideo> as a batch in one transaction 
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> saveAll(List<Youtubevideo> youtubevideos) async {
          var results = _mnYoutubevideo.saveAll("INSERT OR REPLACE INTO youtubevideos (id, url,video_url)  VALUES (?,?,?)",youtubevideos);
          return results;
        }
    
        /// <summary>
        /// Updates if the record exists, otherwise adds a new row
        /// </summary>
        /// <returns>Returns id</returns>
        Future<int> _upsert() async {
          id = await _mnYoutubevideo.rawInsert(
              "INSERT OR REPLACE INTO youtubevideos (id, url,video_url)  VALUES (?,?,?)", [id,url,video_url]);
          return id;
        }
    
        
        /// <summary>
        /// inserts or replaces the sent List<Todo> as a batch in one transaction.
        /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
        /// </summary>
        /// <returns> Returns a <List<BoolResult>> </returns>
        Future<List<BoolResult>> upsertAll(List<Youtubevideo> youtubevideos) async {
          var results = await _mnYoutubevideo.rawInsertAll(
              "INSERT OR REPLACE INTO youtubevideos (id, url,video_url)  VALUES (?,?,?)", youtubevideos);
          return results;
        }
    
    
        /// <summary>
        /// saveAs Youtubevideo. Returns a new Primary Key value of Youtubevideo
        /// </summary>
        /// <returns>Returns a new Primary Key value of Youtubevideo</returns>
        Future<int> saveAs() async {
          id = await _mnYoutubevideo.insert(
              Youtubevideo.withFields(url,video_url));
          return id;
        }
      
    
        /// <summary>
        /// Deletes Youtubevideo
        /// </summary>
        /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
        Future<BoolResult> delete() async {
          print("SQFENTITIY: delete Youtubevideo invoked (id=$id)");
            if (!_softDeleteActivated)
  return _mnYoutubevideo.delete(QueryParams(whereString: "id=$id"));
  else
  return _mnYoutubevideo.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
        }
          
        //private YoutubevideoFilterBuilder _Select;
        YoutubevideoFilterBuilder select(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          _select = new YoutubevideoFilterBuilder(this);
          _select._getIsDeleted = getIsDeleted==true;
          _select.qparams.selectColumns = columnsToSelect;
          return _select;
        }
      
        YoutubevideoFilterBuilder distinct(
            {List<String> columnsToSelect, bool getIsDeleted}) {
          YoutubevideoFilterBuilder _distinct = new YoutubevideoFilterBuilder(this);
          _distinct._getIsDeleted = getIsDeleted==true;
          _distinct.qparams.selectColumns = columnsToSelect;
          _distinct.qparams.distinct = true;
          return _distinct;
        }
      
        void setDefaultValues() {
          
        }
        //end methods
      }
      // endregion youtubevideo
      
          
// region YoutubevideoField
class YoutubevideoField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  YoutubevideoFilterBuilder youtubevideoFB;
  YoutubevideoField(YoutubevideoFilterBuilder fb) {
    param = new DbParameter();
    youtubevideoFB = fb;
  }

  YoutubevideoField get not {
    _waitingNot = " NOT ";
    return this;
  }

  YoutubevideoFilterBuilder equals(var pValue) {
    param.expression = "=";
    youtubevideoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, youtubevideoFB.parameters, param, SqlSyntax.EQuals,
            youtubevideoFB._addedBlocks)
        : setCriteria(pValue, youtubevideoFB.parameters, param, SqlSyntax.NotEQuals,
            youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder isNull() {
    youtubevideoFB._addedBlocks = setCriteria(
        0,
        youtubevideoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder contains(dynamic pValue) {
    youtubevideoFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        youtubevideoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder startsWith(dynamic pValue) {
    youtubevideoFB._addedBlocks = setCriteria(
        pValue + "%",
        youtubevideoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder endsWith(dynamic pValue) {
    youtubevideoFB._addedBlocks = setCriteria(
        "%" + pValue,
        youtubevideoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      youtubevideoFB._addedBlocks = setCriteria(
          pFirst,
          youtubevideoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          youtubevideoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        youtubevideoFB._addedBlocks = setCriteria(pFirst, youtubevideoFB.parameters,
            param, SqlSyntax.LessThan, youtubevideoFB._addedBlocks);
      else
        youtubevideoFB._addedBlocks = setCriteria(pFirst, youtubevideoFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, youtubevideoFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        youtubevideoFB._addedBlocks = setCriteria(pLast, youtubevideoFB.parameters, param,
            SqlSyntax.GreaterThan, youtubevideoFB._addedBlocks);
      else
        youtubevideoFB._addedBlocks = setCriteria(pLast, youtubevideoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, youtubevideoFB._addedBlocks);
    }
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    youtubevideoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.GreaterThan, youtubevideoFB._addedBlocks)
        : setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    youtubevideoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, youtubevideoFB.parameters, param, SqlSyntax.LessThan,
            youtubevideoFB._addedBlocks)
        : setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    youtubevideoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, youtubevideoFB._addedBlocks)
        : setCriteria(pValue, youtubevideoFB.parameters, param, SqlSyntax.LessThan,
            youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    youtubevideoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, youtubevideoFB._addedBlocks)
        : setCriteria(pValue, youtubevideoFB.parameters, param,
            SqlSyntax.GreaterThan, youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }

  YoutubevideoFilterBuilder inValues(var pValue) {
    youtubevideoFB._addedBlocks = setCriteria(
        pValue,
        youtubevideoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        youtubevideoFB._addedBlocks);
    _waitingNot = "";
    youtubevideoFB._addedBlocks.needEndBlock[youtubevideoFB._blockIndex] =
        youtubevideoFB._addedBlocks.retVal;
    return youtubevideoFB;
  }
}
// endregion YoutubevideoField

       // region YoutubevideoFilterBuilder
   class YoutubevideoFilterBuilder extends SearchCriteria {
     AddedBlocks _addedBlocks;
     int _blockIndex = 0;
     List<DbParameter> parameters;
     List<String> orderByList;
     Youtubevideo _obj;
     QueryParams qparams;
     int _pagesize;
     int _page;
     YoutubevideoFilterBuilder(Youtubevideo obj) {
       whereString = "";
       qparams = new QueryParams();
       parameters = List<DbParameter>();
       orderByList = List<String>();
       groupByList = List<String>();
       _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
       _addedBlocks.needEndBlock.add(false);
       _addedBlocks.waitingStartBlock.add(false);
       _pagesize = 0;
       _page = 0;
       _obj = obj;
     }
   
     YoutubevideoFilterBuilder get and {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " AND ";
       return this;
     }
   
     YoutubevideoFilterBuilder get or {
       if (parameters.length > 0)
         parameters[parameters.length - 1].wOperator = " OR ";
       return this;
     }
   
     YoutubevideoFilterBuilder get startBlock {
       _addedBlocks.waitingStartBlock.add(true);
       _addedBlocks.needEndBlock.add(false);
       _blockIndex++;
       if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
       return this;
     }
   
     YoutubevideoFilterBuilder where(String whereCriteria) {
       if (whereCriteria != null && whereCriteria != "") {
         DbParameter param = new DbParameter();
         _addedBlocks = setCriteria(
             0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
         _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
       }
       return this;
     }
   
     YoutubevideoFilterBuilder page(int page, int pagesize) {
       if (page > 0) _page = page;
       if (pagesize > 0) _pagesize = pagesize;
       return this;
     }
   
     YoutubevideoFilterBuilder top(int count) {
       if (count > 0) {
         _pagesize = count;
       }
       return this;
     }
   
     YoutubevideoFilterBuilder get endBlock {
       if (_addedBlocks.needEndBlock[_blockIndex]) {
         parameters[parameters.length - 1].whereString += " ) ";
       }
       _addedBlocks.needEndBlock.removeAt(_blockIndex);
       _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
       _blockIndex--;
       return this;
     }
   
     YoutubevideoFilterBuilder orderBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add(argFields);
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s ");
           }
       }
       return this;
     }
   
     YoutubevideoFilterBuilder orderByDesc(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.orderByList.add("$argFields desc ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.orderByList.add(" $s desc ");
           }
       }
       return this;
     }
   
     YoutubevideoFilterBuilder groupBy(var argFields) {
       if (argFields != null) {
         if (argFields is String)
           this.groupByList.add(" $argFields ");
         else
           for (String s in argFields) {
             if (s != null && s != "") this.groupByList.add(" $s ");
           }
       }
       return this;
     }
   
     YoutubevideoField setField(YoutubevideoField field, String colName, DbType dbtype) {
       field = new YoutubevideoField(this);
       field.param = new DbParameter(
           dbType: dbtype,
           columnName: colName,
           wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
       return field;
     }
   
            YoutubevideoField _id;
     YoutubevideoField get id {
       _id = setField(_id, "id", DbType.integer);
       return _id;
     }
                YoutubevideoField _url;
     YoutubevideoField get url {
       _url = setField(_url, "url", DbType.text);
       return _url;
     }
                YoutubevideoField _video_url;
     YoutubevideoField get video_url {
       _video_url = setField(_video_url, "video_url", DbType.text);
       return _video_url;
     }
       
   
     bool _getIsDeleted;
   
     void _buildParameters() {
       if (_page > 0 && _pagesize > 0) {
         qparams.limit = _pagesize;
         qparams.offset = (_page - 1) * _pagesize;
       } else {
         qparams.limit = _pagesize;
         qparams.offset = _page;
       }
       for (DbParameter param in parameters) {
         if (param.columnName != null) {
           if (param.value is List) {
             param.value = param.value
                 .toString()
                 .replaceAll("[", "")
                 .replaceAll("]", "")
                 .toString();
             whereString += param.whereString
                 .replaceAll("{field}", param.columnName)
                 .replaceAll("?", param.value);
             param.value = null;
           } else
             whereString +=
                 param.whereString.replaceAll("{field}", param.columnName);
           switch (param.dbType) {
             case DbType.bool:
               if (param.value != null) param.value = param.value ? 1 : 0;
               break;
             default:
           }
   
           if (param.value != null) whereArguments.add(param.value);
           if (param.value2 != null) whereArguments.add(param.value2);
         } else
           whereString += param.whereString;
       }
       if (Youtubevideo._softDeleteActivated) {
         if (whereString != "")
           whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
               " ($whereString)";
         else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
       }
   
       if (whereString != "") qparams.whereString = whereString;
       qparams.whereArguments = whereArguments;
       qparams.groupBy = groupByList.join(',');
       qparams.orderBy = orderByList.join(',');
     }
   
     
    /// <summary>
    /// Deletes List<Youtubevideo> batch by query 
    /// </summary>
    /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
    Future<BoolResult> delete() async {
      _buildParameters();
      var r= BoolResult();
        if(Youtubevideo._softDeleteActivated)
          r = await _obj._mnYoutubevideo.updateBatch(qparams,{"isDeleted":1});
      else
          r = await _obj._mnYoutubevideo.delete(qparams);
      return r;    
    }
     
    
     Future<BoolResult> update(Map<String, dynamic> values) {
       _buildParameters();
       return _obj._mnYoutubevideo.updateBatch(qparams, values);
     }
   
     /// This method always returns YoutubevideoObj if exist, otherwise returns null 
     /// <returns>List<Youtubevideo></returns>
     void toSingle(VoidCallback youtubevideo(Youtubevideo o)) {
       _pagesize = 1;
       _buildParameters();
       var objFuture = _obj._mnYoutubevideo.toList(qparams);
       objFuture.then((data) {
         if (data.length > 0)
           youtubevideo(Youtubevideo.fromMap(data[0]));
         else
           youtubevideo(null);
       });
     }
     
   
      /// This method always returns int.
      /// <returns>int</returns>
      Future<BoolResult> toCount(VoidCallback youtubevideoCount (int c)) async {
       _buildParameters();
       qparams.selectColumns = ["COUNT(1) AS CNT"];   
       var youtubevideosFuture = await _obj._mnYoutubevideo.toList(qparams);
         int count = youtubevideosFuture[0]["CNT"];
         youtubevideoCount (count);
         return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
     }
      
     /// This method always returns List<Youtubevideo>. 
     /// <returns>List<Youtubevideo></returns>
     void toList(VoidCallback youtubevideoList (List<Youtubevideo> o)) async {
   
       _buildParameters();
   
       var youtubevideosFuture = _obj._mnYoutubevideo.toList(qparams);
   
       List<Youtubevideo> youtubevideosData = new List<Youtubevideo>();
       youtubevideosFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           youtubevideosData.add(Youtubevideo.fromMap(data[i]));
         }
         youtubevideoList (youtubevideosData);
         youtubevideosData = null;
       });
     }
  
     /// This method always returns Primary Key List<int>. 
     /// <returns>List<int></returns>
     Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
           [bool buildParameters=true]) async {
       if(buildParameters) _buildParameters();
       List<int> idData = new List<int>();
       qparams.selectColumns= ["id"];
       var idFuture = await _obj._mnYoutubevideo.toList(qparams);
   

         int count = idFuture.length;
         for (int i = 0; i < count; i++) {
           idData.add(idFuture[i]["id"]);
         }
         idList (idData);
         return idData;

     }
  
     void toListObject(VoidCallback listObject(List<dynamic> o)) async {
       _buildParameters();
   
       var objectFuture = _obj._mnYoutubevideo.toList(qparams);
   
       List<dynamic> objectsData = new List<dynamic>();
       objectFuture.then((data) {
         int count = data.length;
         for (int i = 0; i < count; i++) {
           objectsData.add(data[i]);
         }
         listObject(objectsData);
         objectsData = null;
       });
   
       
     }
   
   }
   // endregion YoutubevideoFilterBuilder
       
       


// region YoutubevideoFields
class YoutubevideoFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fUrl;
  static TableField get url {
    _fUrl = SqlSyntax.setField(_fUrl, "url", DbType.text);
    return _fUrl;
  }
  static TableField _fVideo_url;
  static TableField get video_url {
    _fVideo_url = SqlSyntax.setField(_fVideo_url, "video_url", DbType.text);
    return _fVideo_url;
  }

}
// endregion YoutubevideoFields

//region YoutubevideoManager
class YoutubevideoManager extends SqfEntityProvider {
  static String _tableName = "youtubevideos";
  static String _colId = "id";

  YoutubevideoManager():super(MyDbModel(),tableName: _tableName, colId: _colId);
}
//endregion YoutubevideoManager
